Spring mvc: We add the spring-webmvc dependency in the pom.xml.

In the web.xml we define the dispatcher servlet which handles all incoming requests. We give it the location to the bean-config.xml as 
a param value.

The <load-on-startup> tag indicates whether to lazy or eager load the beans in the bean-config definition 

<web-app>
    <servlet>
        <servlet-name>appServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>appServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>


In the servlet-context.xml you define the beans and configure the webmvc.
The location of the servlet-context.xml is passed in as param value to the contextConfiguration param in the web.xml.
All the necessary beans are configured from the servlet-context.xml file.

This file contains beans but it contains one very important InternalViewResolver bean which takes in the location of the jsp files

<beans>
    <context:component-scan base-package="com.example.myapp" /> // This is the component scan telling which packages to scan for beans with @Component, @Controller, @Repository etc.
    
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>
</beans>


Apart from these we have the general controller and the jsps




Session replication is the process of saving session data across multiple servers or in a seperate database so that if the current server goes down the session data is still available and the load balancer can redirect the request to a seperate server which can access the session data.












