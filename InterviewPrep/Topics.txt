Topics:
    --> Collections(Hashmaps, Hashsets, Lists)*
    --> MultiThreading (Wait, sleep, join, executable serivecs, thread pool, synchonization block, deadlock)*
    --> Private constructors and Benefits
    --> ApplicationContext uses eager loading and bean factory uses lazy loading. AC supports internationalization. Diff b/w AC and BeanFactory
    --> @Transaction class and Transaction management*
    --> Spring Global exception management
    --> Dependency Management tag in pom*
    --> Hibernate
    --> 10 owasp steps
    --> Directory structure of TOMCAT
    --> AOP



Dont waste interviewrs time.



Session is a very interesting and useful thing available to us. When a user signs up or logs in for the first time a session id is created saved usually in a client side cookie. This id is used to retreive user related information in the client side. What user related information is stored in the client side is usually application specific.


In spring we have the HttpSession object to store and reteive user data.


Dependency element in pom are all the dependencies needed by your project to compile and run.
Dependencies have groupId, artifactId, version and scope.

It is important to note that the dependencies defined in the <dependencyManagement> section of the parent POM are not automatically included in the child modules; they simply define the managed versions and scopes. You still need to explicitly include the dependencies you want to use in the <dependencies> section of each child module's POM file.



Spring security supports a large range of authentication models such as LDAP, OAuth and remember me authentication.

Provides defence against attacks such as session fixation, clickjacking, csrf etc.

To use Spring security:
1. Add dependency in pom.

    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>   
    </dependency>

2. TO use Spring security we need to create a configuration class with @Configuration and @EnableWebSecurity
    Our class will extend the WEbSecurityConfigureAdapter and Overide the configure method




bin: This directory contains script files to start, stop, and manage the Tomcat server.

conf: Here, you will find configuration files such as server.xml, web.xml, and context.xml. These files are used to configure various aspects of the Tomcat server.

lib: This directory contains all the necessary JAR files that Tomcat requires to function.

logs: As the name suggests, this directory stores log files generated by the Tomcat server.

temp: This directory is used by Tomcat to store temporary files.

webapps: This is where you deploy your web applications. Each web application will have its own directory under webapps.

work: Tomcat uses this directory to store files that are generated at runtime, including JSP files that have been translated to Java servlets.





Tomcat directories(bin(start,stop scripts etc.), conf(configuration xml files), lib(all the jars), logs(stores log files), temp(stores temp files), webapps(where web applications are deployed), work(stores files generated at runtime))





















